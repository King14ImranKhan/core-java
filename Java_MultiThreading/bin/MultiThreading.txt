In Java, a thread always exists in any one of the following states. These states are:

New
Active
Blocked / Waiting
Timed Waiting
Terminated


Class A
{
	public synchronised void d1(B b)
	{
	   System.out.println("Thread 1 starts execution of d1() method");
	   try{
		Thread.sleep(6000);
		}
	   catch(InterruptedException e){}
	   System.out.println("Thread 1 trying to call B's last() method")';
	   b.last();
	}
	public synchronised void last()
	{
	   System.out.println("Inside A, this is last() method");
	}
}
class B
{
	public synchronised void d2(A a)
	{
	   System.out.println("Thread 2 starts execution of d2() method");
	   try{
		Thread.sleep(6000);
		}
	   catch(InterruptedException e){}
	   System.out.println("Thread 1 trying to call A's last() method")';
	   a.last();
	}
	public synchronised void last()
	{
	   System.out.println("Inside B, this is last() method");
	}
}
class DeadLock1 extends Thread
	{
	  A a = new A();
	  B b = new B();
	  public void m1()
		{
		   this.start();
		   a.d1(b);
		}
	  public void run()
		{
		    b.d2(a);
	 	}
	public static void main(String[] args)
	{
		DeadLock1 d= new DeadLock1();
		d.m1();
	}
}
	   